#!/usr/bin/env ruby
=begin
  Toodledo client.
=end
# Add the lib directory to the ruby search path.
$: << File.expand_path(File.dirname(__FILE__) + "/../lib")

require 'toodledo'
require 'rubygems'
require 'highline/import'

@filters = {}

# Toodledo config (will create .toodledo file with specs)
def config
  
end

# Loose style (* indicates folder, !!! indicates priority etc)

def hotlist(session)
  # Surprisingly, we can't search for "greater than 0 priority" with the API.
  not_important = 0
  params = { :notcomp => true, :folder => 'Action' }
  tasks = session.get_tasks(params)

  # Highest priority first
  tasks.sort! do |a, b|
    b.priority <=> a.priority
  end
  
  # filter on our end.
  for task in tasks
    if (task.priority > not_important)
      puts "<#{task.server_id}> -- #{task}\n"
    end
  end
end

def inbasket(session)
  params = { :folder => "Inbasket", :priority => "medium" }
  if (title == nil)
    title = ask("Task name: ") { |q| q.readline = true }
  end
  
  result = session.add_task(title, params)
end

def list_tasks(session)
  
  params = { :notcomp => true }
  
  params.merge!(@filters)
  
  tasks = session.get_tasks(params)

  # Highest priority first
  tasks.sort! do |a, b|
    b.priority <=> a.priority
  end
  
  folder_filter = @filters[:folder]
  for task in tasks  
    puts "<#{task.server_id}> -- #{task}\n"
  end
end

def set_context_filter()
  @filters[:context] = ask("Selected context? > ") { |q| q.readline = true }
end 
  
def set_folder_filter()
  @filters[:folder] = ask("Selected folder? > ") { |q| q.readline = true }
end

def set_goal_filter()
  @filters[:goal] = ask("Selected goal? > ") { |q| q.readline = true }
end

def set_priority_filter()
  @filters[:filter] = ask("Selected priority? > ") { |q| q.readline = true }  
end

def list_filters()
  if (@filters.empty?)
    puts "No filters."
    return
  end
  
  @filters.each do |k, v|
    puts "#{k}: #{v}\n"
  end
end

def unfilter()
  @filters = {}
  puts "Filters cleared.\n"
end

# Add tasks
def add_task(session)
  title = ask("Task name: ") { |q| q.echo = true }
  
  puts "Task #{task_id} was added."
end

def delete_task(session)
  task_id = ask("Task ID?: ") { |q| q.echo = true }
  
  puts "Task #{task_id} was deleted."
end

def complete_task(session)
  task_id = ask("Task ID?: ") { |q| q.echo = true }  
  
  puts "Task #{task_id} was completed."
end

def folders(session)
  folders = session.get_folders()

  folders.sort! do |a, b|
    a.name <=> b.name
  end
  
  for folder in folders
    puts "<#{folder.server_id}> -- #{folder}\n"
  end
end

def contexts(session)
  contexts = session.get_contexts()

  contexts.sort! do |a, b|
    a.name <=> b.name
  end
  
  for context in contexts
    puts "<#{context.server_id}> -- #{context}\n"
  end
end

def goals(session)
  goals = session.get_goals()

  goals.sort! do |a, b|
    a.level <=> b.level
  end
  
  for goal in goals
    puts "<#{goal.server_id}> -- #{goal}\n"
  end
end

def help()
  puts "hotlist -- shows the hotlist\n"
  puts "tasks or list -- shows tasks (subject to filters)"
  puts "folders -- shows possible folders\n"
  puts "goals -- shows all goals"
  puts "contexts -- shows all contexts"
  puts
  puts "inbasket -- adds a task to the 'Inbasket' folder (please have one)"
  puts "complete -- completes a task (needs task id)\n"
  puts "add -- adds a task (use syntax rules for folders, contexts, priorities, goals, etc.)"
  puts "delete -- deletes a task (needs task id, cannot be reversed)"
  puts
  puts "context -- defines a context filter on tasks"
  puts "goal -- defines a goal filter on tasks"
  puts "folder -- defines a folder filter on tasks\n"
  puts "priority -- defines a priority filter on tasks\n"
  puts "unfilter -- removes all filters on tasks\n"
  puts
  puts "help or ? -- displays this help message\n"
  puts "quit or exit"
end

def main()
  Toodledo::Session.begin do |session|
    loop do
      input = ask("> ") do |q|
        q.readline = true
      end
      
      case input
      when "config"
        config()
      when "help", "?"
        help()
      when "add"
        add_task(session)
      when "delete"
        delete_task(session)
      when "hotlist"  
        hotlist(session)
      when "complete"
        complete_task(session)
      when "list", "tasks"
        list_tasks(session)
      when "folders"
        folders(session)
      when "goals"
        goals(session)
      when "contexts"
        contexts(session)
      when "context"
        set_context_filter()
      when "folder"
        set_folder_filter()
      when "goal"
        set_goal_filter()
      when "priority"
        set_priority_filter()
      when "filters"
        list_filters()
      when "unfilter"
        unfilter()
      when "inbasket"
        inbasket(session)
      when "quit", "exit"
        break;
      end
      
    end # loop    
  end  
end

main()